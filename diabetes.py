# -*- coding: utf-8 -*-
"""Diabetes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12PrPIwoxdyuNt-XF0Ic7Xj-oA_eNRkq5
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

df=pd.read_csv('/content/diabetes.csv')

df.head()

df.shape

df.describe()

df['Outcome'].value_counts()

df.groupby('Outcome').mean()

x=df.drop(columns= 'Outcome',axis=1)
y=df['Outcome']

print(x)

print(y)

scaler=StandardScaler()

scaler.fit(x)

standardized_data = scaler.transform(x)

print(standardized_data)

X=standardized_data
Y=df['Outcome']

print(X)
print(Y)

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train,Y_train)

X_train_prediction=classifier.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y_train)

print("Accuracy score of the training data :",training_data_accuracy)

X_test_prediction=classifier.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print("Accuracy score of the testing data :",test_data_accuracy)

input_data=(1,85,66,29,0,26.6,0.351,31)
input_data_as_numpy_array=np.asarray(input_data)
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)
std_data=scaler.transform(input_data_reshaped)
print(std_data)
prediction=classifier.predict(std_data)
print(prediction)
if (prediction[0]==0):
  print("The Person is not Diabetic")
else:
    print("The Person is Diabetic")



"""Saving the trained model

"""

import pickle

filename='trained_model.sav'
pickle.dump(classifier,open(filename,'wb'))

"""loading the saved model"""

loaded_model=pickle.load(open('trained_model.sav','rb'))

input_data=(5,166,72,19,175,25.8,0.587,51)
input_data_as_numpy_array=np.asarray(input_data)
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)
std_data=scaler.transform(input_data_reshaped)
print(std_data)
prediction=loaded_model.predict(std_data)
print(prediction)
if (prediction[0]==0):
  print("The Person is not Diabetic")
else:
    print("The Person is Diabetic")

